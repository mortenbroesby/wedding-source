// Font family
$font-family--fallback: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
$font-family--global: "Lora", $font-family--fallback;

$colors: (
  "main-background":            #FFFFFF,
  'main-fontColor':             #142E4B,

  'coupleIntro-background':     #F9D6C8,
  'coupleIntro-and':            #ED3124,

  'infoExtra-background':       #B0DDD7,
  'infoExtra-title':            #FFFFFF,
  'infoExtra-subtitle':         #142E4B,

  'timeline-background':        #B0DDD7,
  'timeline-title':             #FFFFFF,
  'timeline-subtitle':          #142E4B,

  'information-title':          #ED3124,

  'rsvp-background':            #B0DDD7,

  'footerArea-background':      #F9D6C8,
  'footerArea-title':           #ED3124,
);

// Get the named color from our color map, with optional opacity.
// @param  string $color   A named color found in our $colors map.
// @param  number $opacity Desired opacity, defaulting to 1 (full opacity).
// @return color           The requested color with the alpha value. Remember that "color" is a value type of its own in Sass.
@function get-color($color, $opacity: 1) {

	// Check to make sure the named color we requested exists in our $colors map.
	@if map-has-key($colors, $color) {

		// If so, return the color value along with the alpha channel value.
		@return transparentize(map-get( $colors, $color ), 1 - $opacity);
	}

	// If the requested color name was not found in our map, return magenta instead
	// (so it's obvious that something is wrong without completely erroring out).
	@return #f0f;
}

/* Color variables */
$main-fontColor: get-color('main-fontColor');

$coupleIntro-background: get-color('coupleIntro-background');
$coupleIntro-and: get-color('coupleIntro-and');

$infoExtra-background: get-color('infoExtra-background');
$infoExtra-title: get-color('infoExtra-title');
$infoExtra-subtitle: get-color('infoExtra-subtitle');

$timeline-background: get-color('timeline-background');
$timeline-title: get-color('timeline-title');
$timeline-subtitle: get-color('timeline-subtitle');

$information-title: get-color('information-title');

$rsvp-background: get-color('rsvp-background');

$footerArea-background: get-color('footerArea-background');
$footerArea-title: get-color('footerArea-title');

/* Z-index landscape */
$z-index: (
  spinner             : 100,
  overlay             : 100,
  menu-bar            : 101,
  menu                : 50,
  logo                : 10,
  input-arrow         : 2,
  input               : 1,
  root                : 0,
  behind              : -1,
);

@function z-index($key) {
  @return map-get($z-index, $key);
}

@mixin z-index($key) {
  z-index: z-index($key);
}

@mixin title {
  font-size: pxToRems(30);
  font-family: "Karla", cursive;
  font-weight: bold;
  line-height: 1;
}

// Function for converting a px based font-size to rem.
@function calculateRem($size) {
  $remSize: $size / 12px;
  // Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@function pxToRems($px) {
	@return 0rem + $px / 16;
}

@function vh($quantity) {
  @return calc(var(--vh, 1vh) * #{$quantity});
}

@mixin fullheight {
  height: 100%;
  height: 100vh;

  @supports (color: var(--primary)) {
    height: vh(100);
  }
}

@mixin minFullheight {
  min-height: 100%;
  min-height: 100vh;

  @supports (color: var(--primary)) {
    min-height: vh(100);
  }
}
